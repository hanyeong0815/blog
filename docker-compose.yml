# 파일 규격 버전
version: "3"
# 이 항목 밑에 실행하려는 컨테이너 들을 정의
services:
#  member-service:
#    image: yoehadu815/member-service:latest
#    container_name: member_service_container
#    ports:
#      - "8080:8080"
#    depends_on:
#      - member-profile-service
#    restart: always
#
#  member-profile-service:
#    image: yoehadu815/member-profile-service:latest
#    container_name: member_profile_service_container
#    ports:
#      - "8091:8091"
#      - "8090:8090"
#    restart: always

#  board-service:
#    image: yoehadu815/board-service:latest
#    container_name: board_service_container
#    ports:
#      - "8100:8100"
#    restart: always
#
#  notification-service:
#    image: yoehadu815/notification-service:latest
#    container_name: notification_service_container
#    ports:
#      - "8000:8000"
#    restart: always
#
  member_postgres14_blog:
    image: postgres:14
    container_name: member_postgres14_rdb_blog
    environment:
      TZ: Asia/Seoul
      POSTGRES_DB: "${MEMBER_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    ports:
      - "5432:5432"
    volumes:
      - member_sticky_volume:/var/lib/postgresql/data
      - ./db/initdb.d:/docker-entrypoint-initdb.d:ro
    env_file:
      - .env
    restart: always

  blog_redis_proto:
    image: redis:7.0
    container_name: blog_redis7_proto
    ports:
      - "6379:6379"
    volumes:
      - sticky_volume_common_redis:/redis/data
      - ./config/redis.conf:/usr/local/conf/redis.conf
    # 컨테이너에 docker label을 이용해서 메타데이터 추가
    labels:
      - "name=redis"
      - "mode=standalone"
    # 컨테이너 종료시 재시작 여부 설정
    restart: always
    command: redis-server /usr/local/conf/redis.conf

  profile_postgres14_blog:
    image: postgres:14
    container_name: profile_postgres14_rdb_blog
    environment:
      TZ: Asia/Seoul
      POSTGRES_DB: "${PROFILE_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    ports:
      - "5442:5432"
    volumes:
      - profile_sticky_volume:/var/lib/postgresql/data
      - ./db/initdb.d:/docker-entrypoint-initdb.d:ro
    env_file:
      - .env
    restart: always

  #   서비스 명
  profile_log_mongo_blog:
    image: mongo:5.0 # Official Image
    container_name: profile_log_mongo_blog
    environment:
      # Information to Connect (Reserved Environments)
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_DATABASE=profile-log
    ports:
      - 27017:27017 # accessing port : inside port
    restart: on-failure
    volumes:
      # "local(or volume container):inside directory"
      - sticky_volume_profile_log_mongo:/data/db

  # MongoDB Client - web based
  profile_log_mongo_blog_express:
    # NOTE 1.0.0-alpha exists.
    image: mongo-express:0.54
    restart: always
    ports:
      - "27018:8081"
    environment:
      # ME_CONFIG_MONGODB_SERVER: ${Mongo DB container name} (required)
      ME_CONFIG_MONGODB_SERVER: profile_log_mongo_blog
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root

  #   서비스 명
  board_mongo_blog:
    image: mongo:5.0 # Official Image
    container_name: board_mongo_blog
    environment:
      # Information to Connect (Reserved Environments)
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_DATABASE=board
    ports:
      - 27027:27017 # accessing port : inside port
    restart: on-failure
    volumes:
      # "local(or volume container):inside directory"
      - sticky_volume_board_mongo:/data/db

  # MongoDB Client - web based
  board_mongo_blog_express:
    # NOTE 1.0.0-alpha exists.
    image: mongo-express:0.54
    restart: always
    ports:
      - "27028:8081"
    environment:
      # ME_CONFIG_MONGODB_SERVER: ${Mongo DB container name} (required)
      ME_CONFIG_MONGODB_SERVER: board_mongo_blog
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: el
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false  # 보안 기능 비활성화
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.0
    container_name: lo
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: ki
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      - elasticsearch

volumes:
  member_sticky_volume:
  sticky_volume_common_redis:
  profile_sticky_volume:
  sticky_volume_profile_log_mongo:
  sticky_volume_board_mongo:
  es_data:
    driver: local